// Mocks generated by Mockito 5.4.5 from annotations
// in app_desafio_v2/test/data/repositories/rick_and_morty_api_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:app_desafio_v2/features/shared/data/datasources/rick_and_morty_api_datasource_impl.dart'
    as _i3;
import 'package:app_desafio_v2/features/shared/model/entities/entities.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeInfo_0 extends _i1.SmartFake implements _i2.Info {
  _FakeInfo_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCharacterResponse_1 extends _i1.SmartFake
    implements _i2.CharacterResponse {
  _FakeCharacterResponse_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [RickAndMortyApiDatasourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockRickAndMortyApiDatasourceImpl extends _i1.Mock
    implements _i3.RickAndMortyApiDatasourceImpl {
  MockRickAndMortyApiDatasourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Character>> getCharacters([
    String? nextPage = 'https://rickandmortyapi.com/api/character?page=1',
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#getCharacters, [nextPage]),
            returnValue: _i4.Future<List<_i2.Character>>.value(
              <_i2.Character>[],
            ),
          )
          as _i4.Future<List<_i2.Character>>);

  @override
  _i4.Future<_i2.Info> getInfo([
    String? nextPage = 'https://rickandmortyapi.com/api/character?page=1',
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#getInfo, [nextPage]),
            returnValue: _i4.Future<_i2.Info>.value(
              _FakeInfo_0(this, Invocation.method(#getInfo, [nextPage])),
            ),
          )
          as _i4.Future<_i2.Info>);

  @override
  _i4.Future<_i2.CharacterResponse> apiResponse(String? nextPage) =>
      (super.noSuchMethod(
            Invocation.method(#apiResponse, [nextPage]),
            returnValue: _i4.Future<_i2.CharacterResponse>.value(
              _FakeCharacterResponse_1(
                this,
                Invocation.method(#apiResponse, [nextPage]),
              ),
            ),
          )
          as _i4.Future<_i2.CharacterResponse>);
}
